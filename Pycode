#Importing data from CSV
import csv

with open("./venv/orders.csv", 'r') as file:
    data = []
    c = 0
    csvreader = csv.reader(file)
    for row in csvreader:
        if c == 0:
            headers = row
            c += 1
        else:
            data.append(row)

# Initialising Values
months_price_mapping = {}
name_price_mapping = {}
customer_price_mapping = {}
highest_month = 0
price = []
date_index, name_of_product_index, customer_id_index, product_price_id_index, product_quantity_index = 0, 0, 0, 0, 0

# Getting index of all categories
for i in range(len(headers)):
    if headers[i] == "order_date":
        date_index = i
    if headers[i] == "product_name":
        name_of_product_index = i
    if headers[i] == "customer_id":
        customer_id_index = i
    if headers[i] == "product_price":
        product_price_id_index = i
    if headers[i] == "quantity":
        product_quantity_index = i

# Total Revenue generated for each month
def revenue_per_month():
    try:
        print("\nRevenue generated for each month")
        for row in data:
            date = row[date_index]
            month = date[2] + date[3]
        # Calculating final price of each product
            product_price = float(row[product_price_id_index])
            quantity = int(row[product_quantity_index])
            final_price = product_price * quantity
        # months_price_mapping is a dict which has key as month and value as list of product_final_prices
            if month in months_price_mapping:
                months_price_mapping[month].append(final_price)
            else:
                months_price_mapping[month] = [final_price]
        # Calculating the sum of revenue for each month
        for month, price_list in months_price_mapping.items():
            total_sum = sum(price_list)
            print("Total revenue generated for {}th month is Rs {}".format(month, total_sum))
    except Exception as exc:
        print("While executing revenue_per_month "
              "function the following exception has raised\n")
        print(exc)

# Total revenue generated for each product
def revenue_per_product():
    try:
        print("\nRevenue generated for each product")
        for row in data:
            product_name = row[name_of_product_index]
        # Calculating final price of each product
            product_price = float(row[product_price_id_index])
            quantity = int(row[product_quantity_index])
            final_price = product_price * quantity
        # name_price_mapping is a dict which has key as product_name and value as list of product_final_prices
            if product_name in name_price_mapping:
                name_price_mapping[product_name].append(final_price)
            else:
                name_price_mapping[product_name] = [final_price]
        # Calculating the sum of revenue for each product
        for product_name, price_list in name_price_mapping.items():
            total_sum = sum(price_list)
            print("Total revenue generated for {} is Rs {}".format(product_name, total_sum))
    except Exception as exc:
        print("While executing revenue_per_month "
              "function the following exception has raised\n")
        print(exc)

# Total revenue generated by each customer
def revenue_per_customer():
    try:
        print("\nRevenue generated for each customer")
        for row in data:
            customer = row[customer_id_index]
        # Calculating final price of each product
            product_price = float(row[product_price_id_index])
            quantity = int(row[product_quantity_index])
            final_price = product_price * quantity
        # customer_price_mapping is a dict which has key as customer_id and value as list of product_final_prices
            if customer in customer_price_mapping:
                customer_price_mapping[customer].append(final_price)
            else:
                customer_price_mapping[customer] = [final_price]
        # Calculating the sum of revenue for each customer
        for customer, price_list in customer_price_mapping.items():
            total_sum = sum(price_list)
            print("Total revenue generated by {} is Rs {}".format(customer, total_sum))
    except Exception as exc:
        print("While executing revenue_per_month "
              "function the following exception has raised\n")
        print(exc)

# Top 10 customers by revenue generated
def top_consumers_list():
    try:
        print("\nTop Consumers List")
        # Calculating the sum of revenue for each customer
        for customer, price_list in customer_price_mapping.items():
            total_sum = sum(price_list)
            price.append(total_sum)
        # Convert the list to set to remove duplicates and then back to list to keep the items in an ordered manner
        price_set = list(set(price))
        price_set.sort(reverse=True)
        # Getting the list of top consumers in descending order
        for item in price_set:
            for customer, price_list in customer_price_mapping.items():
                if item == sum(price_list):
                    print("Total revenue generated by {} is Rs {}".format(customer, item))
    except Exception as exc:
        print("While executing revenue_per_month "
              "function the following exception has raised\n")
        print(exc)

# Function call
revenue_per_month()
revenue_per_product()
revenue_per_customer()
top_consumers_list()
print("\n")
